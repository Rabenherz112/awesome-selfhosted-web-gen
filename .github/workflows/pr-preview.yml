name: PR Preview

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main]
  pull_request_target:
    types: [closed]

jobs:
  build-preview:
    if: github.event.action != 'closed'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout PR code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Clone awesome-selfhosted-data
        run: |
          git clone https://github.com/awesome-selfhosted/awesome-selfhosted-data.git

      - name: Install Python dependencies
        run: |
          pip install -r requirements.txt

      - name: Install Node.js dependencies
        run: |
          npm install

      - name: Generate website
        run: |
          python generate.py -c config-pr-preview.yml build

      - name: Deploy to GitHub Pages branch
        run: |
          # Configure git
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

          # Store current working directory
          WORK_DIR=$(pwd)

          # Check if gh-pages branch exists remotely
          if git ls-remote --heads origin gh-pages | grep -q gh-pages; then
            # Branch exists, fetch and checkout
            git fetch origin gh-pages:gh-pages
            git checkout gh-pages
          else
            # Branch doesn't exist, create orphan branch
            git checkout --orphan gh-pages
            git rm -rf .
            echo "# PR Previews" > README.md
            git add README.md
            git commit -m "Initialize gh-pages branch for PR previews"
            git push origin gh-pages
          fi

          # Create PR directory and copy files
          mkdir -p pr-${{ github.event.number }}
          cp -r ${WORK_DIR}/output/* pr-${{ github.event.number }}/

          # Update or create active PRs JSON file
          cat > active-prs.json << 'EOF'
          []
          EOF
          
          # Read existing active PRs if file exists
          if [ -f active-prs.json ]; then
            EXISTING_PRS=$(cat active-prs.json)
          else
            EXISTING_PRS="[]"
          fi
          
          # Add current PR to the list (using Python for JSON manipulation)
          python3 << 'PYTHON_SCRIPT'
          import json
          import sys
          import os
          
          pr_number = ${{ github.event.number }}
          
          # Read existing PRs
          try:
              with open('active-prs.json', 'r') as f:
                  active_prs = json.load(f)
          except:
              active_prs = []
          
          # Remove any existing entry for this PR and add the new one
          active_prs = [pr for pr in active_prs if pr['number'] != pr_number]
          active_prs.append({
              'number': pr_number,
              'title': 'PR #' + str(pr_number),
              'url': 'pr-' + str(pr_number) + '/',
              'updated': '$(date -Iseconds)'
          })
          
          # Sort by PR number (newest first)
          active_prs.sort(key=lambda x: x['number'], reverse=True)
          
          # Write back to file
          with open('active-prs.json', 'w') as f:
              json.dump(active_prs, f, indent=2)
          PYTHON_SCRIPT

          # Create/update index page with list of PR previews
          cat > index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>PR Previews - Awesome Self-Hosted Web Generator</title>
              <style>
                  body {
                      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                      margin: 40px;
                      background: #f7fafc;
                  }
                  .container { max-width: 800px; margin: 0 auto; }
                  .header { text-align: center; margin-bottom: 40px; }
                  .preview-list { list-style: none; padding: 0; }
                  .preview-item {
                      margin: 10px 0;
                      padding: 20px;
                      background: white;
                      border: 1px solid #e2e8f0;
                      border-radius: 8px;
                      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
                  }
                  .preview-item a {
                      text-decoration: none;
                      color: #3182ce;
                      font-weight: 500;
                      font-size: 1.1em;
                  }
                  .preview-item a:hover { text-decoration: underline; }
                  .pr-meta {
                      font-size: 0.9em;
                      color: #718096;
                      margin-top: 5px;
                  }
                  .badge {
                      display: inline-block;
                      padding: 2px 8px;
                      background: #edf2f7;
                      color: #4a5568;
                      border-radius: 4px;
                      font-size: 0.8em;
                      margin-left: 8px;
                  }
              </style>
          </head>
          <body>
              <div class="container">
                  <div class="header">
                      <h1>üîç PR Previews</h1>
                      <p>Available preview deployments for pull requests</p>
                  </div>
                  <ul class="preview-list" id="previewList">
                      <li>Loading...</li>
                  </ul>
              </div>
              <script>
                  async function loadPreviews() {
                      try {
                          const response = await fetch('./active-prs.json');
                          if (!response.ok) {
                              throw new Error('Failed to load active PRs');
                          }
                          const activePrs = await response.json();
                          const previewList = document.getElementById('previewList');
                          
                          if (activePrs.length === 0) {
                              previewList.innerHTML = '<li>No PR previews available</li>';
                          } else {
                              previewList.innerHTML = activePrs.map(pr => {
                                  return `<li class="preview-item">
                                      <a href="${pr.url}">PR #${pr.number} Preview</a>
                                      <span class="badge">Active</span>
                                      <div class="pr-meta">
                                          Preview for Pull Request #${pr.number}
                                      </div>
                                  </li>`;
                              }).join('');
                          }
                      } catch (error) {
                          console.error('Error loading previews:', error);
                          document.getElementById('previewList').innerHTML = '<li>Error loading preview list. No active PRs found.</li>';
                      }
                  }
                  loadPreviews();
              </script>
          </body>
          </html>
          EOF

          # Add only the necessary files and commit
          git add pr-${{ github.event.number }}/ index.html active-prs.json
          # Add README.md if it exists
          [ -f README.md ] && git add README.md
          if git diff --staged --quiet; then
              echo "No changes to commit"
          else
              git commit -m "Deploy PR #${{ github.event.number }} preview"
              git push origin gh-pages
          fi

      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.pull_request.number;
            const repoUrl = `https://${context.repo.owner}.github.io/${context.repo.repo}`;
            const previewUrl = `${repoUrl}/pr-${prNumber}/`;

            // Check if we already have a preview comment
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });

            const botComment = comments.data.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('üîç PR Preview')
            );

            const commentBody = `## üîç PR Preview

            Your changes have been deployed! You can preview them here:

            **üì± Preview URL:** ${previewUrl}

            This preview was generated from commit \`${context.payload.pull_request.head.sha.substring(0, 7)}\` and will be updated when you push new changes.

            ### ‚úÖ Build Status
            - Generator executed successfully
            - Website built without errors
            - Static files deployed to GitHub Pages

            ---
            *This comment will be automatically updated when you push new commits.*`;

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: commentBody
              });
            }

  cleanup-preview:
    if: github.event.action == 'closed'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Remove PR preview directory
        run: |
          # Configure git
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

          # Check if gh-pages branch exists and checkout
          if git ls-remote --heads origin gh-pages | grep -q gh-pages; then
            git fetch origin gh-pages:gh-pages
            git checkout gh-pages

            # Remove PR directory if it exists
            if [ -d "pr-${{ github.event.number }}" ]; then
              rm -rf pr-${{ github.event.number }}
              
              # Update active PRs JSON file to remove this PR
              if [ -f active-prs.json ]; then
                python3 << 'PYTHON_SCRIPT'
          import json
          
          pr_number = ${{ github.event.number }}
          
          # Read existing PRs
          try:
              with open('active-prs.json', 'r') as f:
                  active_prs = json.load(f)
          except:
              active_prs = []
          
          # Remove this PR from the list
          active_prs = [pr for pr in active_prs if pr['number'] != pr_number]
          
          # Write back to file
          with open('active-prs.json', 'w') as f:
              json.dump(active_prs, f, indent=2)
          PYTHON_SCRIPT
              fi
              
              git add pr-${{ github.event.number }} active-prs.json
              if git diff --staged --quiet; then
                echo "No changes to commit"
              else
                git commit -m "Remove PR #${{ github.event.number }} preview (PR closed)"
                git push origin gh-pages
              fi
            else
              echo "PR directory pr-${{ github.event.number }} not found"
            fi
          else
            echo "gh-pages branch does not exist"
          fi

      - name: Comment on closed PR
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.pull_request.number;

            // Find and update the preview comment
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });

            const botComment = comments.data.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('üîç PR Preview')
            );

            if (botComment) {
              const commentBody = `## üîç PR Preview *(Closed)*

              This PR has been ${context.payload.pull_request.merged ? 'merged' : 'closed'}.

              The preview deployment has been removed to save space.

              ---
              *Preview was available at: \`pr-${prNumber}/\`*`;

              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            }