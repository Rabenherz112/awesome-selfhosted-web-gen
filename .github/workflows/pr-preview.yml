name: PR Preview

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main]
  pull_request_target:
    types: [closed]

jobs:
  build-preview:
    if: github.event.action != 'closed'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout PR code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Initialize build log
        run: |
          echo "Build log for PR #${{ github.event.number }} ‚Äî $(date -Iseconds)" > build.log

      - name: Clone awesome-selfhosted-data
        shell: bash
        run: |
          set -o pipefail
          git clone https://github.com/awesome-selfhosted/awesome-selfhosted-data.git 2>&1 | tee -a build.log

      - name: Install Python dependencies
        shell: bash
        run: |
          set -o pipefail
          pip install -r requirements.txt 2>&1 | tee -a build.log

      - name: Generate website
        shell: bash
        run: |
          set -o pipefail
          # Create a temporary config file with dynamic base_path
          cp config-pr-preview.yml config-pr-preview-temp.yml 2>&1 | tee -a build.log
          # Update base_path to include repository name and PR number
          sed -i 's|base_path: ""|base_path: "/awesome-selfhosted-web-gen/pr-${{ github.event.number }}"|g' config-pr-preview-temp.yml 2>&1 | tee -a build.log
          # Generate website with the modified config
          python generate.py -c config-pr-preview-temp.yml build 2>&1 | tee -a build.log
          # Clean up temporary config file
          rm -f config-pr-preview-temp.yml 2>&1 | tee -a build.log

      # Deploy only if everything above succeeded
      - name: Deploy to GitHub Pages branch
        if: ${{ success() }}
        shell: bash
        run: |
          set -o pipefail
          # Configure git
          git config --global user.name 'github-actions[bot]' 2>&1 | tee -a build.log
          git config --global user.email 'github-actions[bot]@users.noreply.github.com' 2>&1 | tee -a build.log

          # Store current working directory
          WORK_DIR=$(pwd)

          # Check if gh-pages branch exists remotely
          if git ls-remote --heads origin gh-pages | grep -q gh-pages; then
            # Branch exists, fetch and checkout
            git fetch origin gh-pages:gh-pages 2>&1 | tee -a build.log
            git checkout gh-pages 2>&1 | tee -a build.log
          else
            # Branch doesn't exist, create orphan branch
            git checkout --orphan gh-pages 2>&1 | tee -a build.log
            git rm -rf . 2>&1 | tee -a build.log
            echo "# PR Previews" > README.md
            git add README.md 2>&1 | tee -a build.log
            git commit -m "Initialize gh-pages branch for PR previews" 2>&1 | tee -a build.log
            git push origin gh-pages 2>&1 | tee -a build.log
          fi

          # Create PR directory and copy files
          mkdir -p pr-${{ github.event.number }} 2>&1 | tee -a build.log
          cp -r ${WORK_DIR}/output/* pr-${{ github.event.number }}/ 2>&1 | tee -a build.log

          # Update or create active PRs JSON file
          cat > active-prs.json << 'EOF'
          []
          EOF

          # Add/refresh this PR entry
          python3 << 'PYTHON_SCRIPT'
          import json, os
          pr_number = int(os.environ.get('PR_NUMBER', '0'))
          try:
              with open('active-prs.json', 'r') as f:
                  active_prs = json.load(f)
          except Exception:
              active_prs = []
          active_prs = [pr for pr in active_prs if pr.get('number') != pr_number]
          active_prs.append({
              'number': pr_number,
              'title': f'PR #{pr_number}',
              'url': f'pr-{pr_number}/',
              'updated': os.popen('date -Iseconds').read().strip()
          })
          active_prs.sort(key=lambda x: x['number'], reverse=True)
          with open('active-prs.json', 'w') as f:
              json.dump(active_prs, f, indent=2)
          PYTHON_SCRIPT
        env:
          PR_NUMBER: ${{ github.event.number }}

      - name: Commit & push preview
        if: ${{ success() }}
        shell: bash
        run: |
          set -o pipefail
          # Write/refresh index.html
          cat > index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>PR Previews - Awesome Self-Hosted Web Generator</title>
              <style>
                  body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; margin: 40px; background: #f7fafc; }
                  .container { max-width: 800px; margin: 0 auto; }
                  .header { text-align: center; margin-bottom: 40px; }
                  .preview-list { list-style: none; padding: 0; }
                  .preview-item { margin: 10px 0; padding: 20px; background: white; border: 1px solid #e2e8f0; border-radius: 8px; box-shadow: 0 1px 3px rgba(0,0,0,0.1); }
                  .preview-item a { text-decoration: none; color: #3182ce; font-weight: 500; font-size: 1.1em; }
                  .preview-item a:hover { text-decoration: underline; }
                  .pr-meta { font-size: 0.9em; color: #718096; margin-top: 5px; }
                  .badge { display: inline-block; padding: 2px 8px; background: #edf2f7; color: #4a5568; border-radius: 4px; font-size: 0.8em; margin-left: 8px; }
              </style>
          </head>
          <body>
              <div class="container">
                  <div class="header">
                      <h1>üîç PR Previews</h1>
                      <p>Available preview deployments for pull requests</p>
                  </div>
                  <ul class="preview-list" id="previewList">
                      <li>Loading...</li>
                  </ul>
              </div>
              <script>
                  async function loadPreviews() {
                      try {
                          const response = await fetch('./active-prs.json');
                          if (!response.ok) throw new Error('Failed to load active PRs');
                          const activePrs = await response.json();
                          const previewList = document.getElementById('previewList');
                          if (activePrs.length === 0) {
                              previewList.innerHTML = '<li>No PR previews available</li>';
                          } else {
                              previewList.innerHTML = activePrs.map(pr => {
                                  return `<li class="preview-item">
                                      <a href="${pr.url}">PR #${pr.number} Preview</a>
                                      <span class="badge">Active</span>
                                      <div class="pr-meta">Preview for Pull Request #${pr.number}</div>
                                  </li>`;
                              }).join('');
                          }
                      } catch (error) {
                          console.error('Error loading previews:', error);
                          document.getElementById('previewList').innerHTML = '<li>Error loading preview list. No active PRs found.</li>';
                      }
                  }
                  loadPreviews();
              </script>
          </body>
          </html>
          EOF

          git add pr-${{ github.event.number }}/ index.html active-prs.json 2>&1 | tee -a build.log
          [ -f README.md ] && git add README.md 2>&1 | tee -a build.log
          if git diff --staged --quiet; then
              echo "No changes to commit" | tee -a build.log
          else
              git commit -m "Deploy PR #${{ github.event.number }} preview" 2>&1 | tee -a build.log
              git push origin gh-pages 2>&1 | tee -a build.log
          fi

      # Marker that only appears on successful deploys
      - name: Mark success
        if: ${{ success() }}
        run: echo "ok" > .build_succeeded

      # Unified comment: update/create a single "üîç PR Preview" comment on success or failure
      - name: Comment on PR (update or create, success or failure)
        if: ${{ always() }}
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            const prNumber = context.payload.pull_request.number;
            const owner = context.repo.owner;
            const repo  = context.repo.repo;
            const headShaShort = context.payload.pull_request.head.sha.substring(0, 7);

            // Success marker written only when deploy succeeded
            let isSuccess = false;
            try { isSuccess = fs.existsSync('.build_succeeded'); } catch (e) {}

            // Load existing "üîç PR Preview" comment if present
            const { data: comments } = await github.rest.issues.listComments({
              owner, repo, issue_number: prNumber,
            });

            const PREVIEW_ANCHOR = '## üîç PR Preview';
            let existing = comments.find(c => c.user.type === 'Bot' && c.body.includes(PREVIEW_ANCHOR));

            // Reuse existing Preview URL if present (so failures keep the same link)
            let existingPreviewUrl = undefined;
            if (existing) {
              const m = existing.body.match(/\*\*üì± Preview URL:\*\*\s*(\S+)/);
              if (m) existingPreviewUrl = m[1];
            }

            // Compute preview URL for success case
            const computedPreviewUrl = `https://${owner}.github.io/${repo}/pr-${prNumber}/`;
            const effectivePreviewUrl = isSuccess ? (existingPreviewUrl ?? computedPreviewUrl) : existingPreviewUrl;

            // Read build log (if exists) and truncate for safety
            let logText = '';
            try { logText = fs.readFileSync('build.log', 'utf8'); } catch (e) {}
            const MAX = 60000;
            if (logText.length > MAX) {
              logText = '... (truncated) ...\\n' + logText.slice(-MAX);
            }
            const shownChars = Math.min(logText.length, MAX);

            // Common header
            let body = `## üîç PR Preview

            ${effectivePreviewUrl ? `**üì± Preview URL:** ${effectivePreviewUrl}\n` : ''}

            This preview was generated from commit \`${headShaShort}\` and will be updated when you push new changes.
            `;

            // Build Status section (icon toggles)
            if (isSuccess) {
              body += `
            ### ‚úÖ Build Status
            - Generator executed successfully
            - Website built without errors
            - Static files deployed to GitHub Pages

            ---
            *This comment will be automatically updated when you push new commits.*`;
            } else {
              body += `
            ### ‚ùå Build Status
            - Build failed ‚Äî preview not deployed

            <details>
            <summary>Build log (last ${shownChars} characters)</summary>

            \`\`\`
            ${logText || 'No build log available.'}
            \`\`\`
            </details>

            ---
            *This comment will be automatically updated when you push new commits.*`;
            }

            // Update or create the single comment
            if (existing) {
              await github.rest.issues.updateComment({
                owner, repo, comment_id: existing.id, body
              });
            } else {
              await github.rest.issues.createComment({
                owner, repo, issue_number: prNumber, body
              });
            }

  cleanup-preview:
    if: github.event.action == 'closed'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Remove PR preview directory
        run: |
          # Configure git
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

          # Check if gh-pages branch exists and checkout
          if git ls-remote --heads origin gh-pages | grep -q gh-pages; then
            git fetch origin gh-pages:gh-pages
            git checkout gh-pages

            # Remove PR directory if it exists
            if [ -d "pr-${{ github.event.number }}" ]; then
              rm -rf pr-${{ github.event.number }}
              
              # Update active PRs JSON file to remove this PR
              if [ -f active-prs.json ]; then
                python3 << 'PYTHON_SCRIPT'
          import json
          pr_number = ${{ github.event.number }}
          try:
              with open('active-prs.json', 'r') as f:
                  active_prs = json.load(f)
          except Exception:
              active_prs = []
          active_prs = [pr for pr in active_prs if pr.get('number') != pr_number]
          with open('active-prs.json', 'w') as f:
              json.dump(active_prs, f, indent=2)
          PYTHON_SCRIPT
              fi
              
              git add pr-${{ github.event.number }} active-prs.json
              if git diff --staged --quiet; then
                echo "No changes to commit"
              else
                git commit -m "Remove PR #${{ github.event.number }} preview (PR closed)"
                git push origin gh-pages
              fi
            else
              echo "PR directory pr-${{ github.event.number }} not found"
            fi
          else
            echo "gh-pages branch does not exist"
          fi

      - name: Comment on closed PR
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.pull_request.number;

            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });

            const botComment = comments.data.find(c =>
              c.user.type === 'Bot' && c.body.includes('üîç PR Preview')
            );

            if (botComment) {
              const body = `## üîç PR Preview *(Closed)*

              This PR has been ${context.payload.pull_request.merged ? 'merged' : 'closed'}.

              The preview deployment has been removed to save space.

              ---
              *Preview was available at: \`pr-${prNumber}/\`*`;

              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body
              });
            }
